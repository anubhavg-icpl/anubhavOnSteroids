- name: Configure security virtual machine
  hosts: security
  vars:
    security_user: security
    security_network: security
    podman_user: '{{ security_user }}'

    security_keycloak_pg_pass: 'DB_KC#mN8$pL4vR6@bK2&xQ9wZ5yT3'
    security_keycloak_admin_user: 'admin'
    security_keycloak_admin_password: 'KC_Admin#kP9$mL5vR3@bN7&xJ4wQ8'

    security_wazuh_certs: '/var/wazuh'
    security_wazuh_generator_conf: '/var/wazuh_generator'

  tasks:
    - name: Ensure there's a virtual network for Keycloak
      ansible.builtin.import_role:
        name: podman
        tasks_from: network
      vars:
        podman_network: '{{ security_network }}'
        podman_user: '{{ security_user }}'

    - name: Deploy Postgres for Keycloak
      ansible.builtin.import_role:
        name: postgres
      vars:
        postgres_podman_user: '{{ security_user }}'
        postgres_container: postgres
        postgres_data_vol: 'postgres_keycloak'
        postgres_db: keycloak
        postgres_user: keycloak
        postgres_network: '{{ security_network }}'
        postgres_pass: '{{ security_keycloak_pg_pass }}'

    - name: Deploy Keycloak
      ansible.builtin.import_role:
        name: keycloak
      vars:
        keycloak_user: '{{ security_user }}'
        keycloak_container: keycloak
        keycloak_network: '{{ security_network }}'
        keycloak_pg_pass: '{{ security_keycloak_pg_pass }}'
        # keycloak_bootstrap_username:
        # keycloak_bootstrap_password:

    - name: Deploy Vaultwarden
      ansible.builtin.import_role:
        name: vaultwarden
      vars:
        vaultwarden_container: vaultwarden
        vaultwarden_user: '{{ security_user }}'
        vaultwarden_data: 'vaultwarden'
        vaultwarden_admin_token: 'VW_Admin#pL7$nK4vM8@bX2&rQ9wY5zT6'
        vaultwarden_signups_allowed: 'false'
        vaultwarden_host: '{{ password_mgr_host }}'

    - name: Generate Wazuh certificates
      ansible.builtin.import_role:
        name: wazuh_indexer
        tasks_from: generate_certs
      vars:
        wazuh_indexer_user: '{{ security_user }}'
        wazuh_indexer_group: '{{ security_user }}'
        wazuh_indexer_tls_dir: '{{ security_wazuh_certs }}'
        wazuh_indexer_host: 'wazuh.indexer'
        wazuh_indexer_manager_host: 'wazuh.manager'
        wazuh_indexer_dashboard_host: 'wazuh.dashboard'
        wazuh_indexer_tls_conf_dir: '{{ security_wazuh_generator_conf }}'

    - name: Deploy Wazuh indexer
      ansible.builtin.import_role:
        name: wazuh_indexer
      vars:
        wazuh_indexer_user: '{{ security_user }}'
        wazuh_indexer_container: 'wazuh_indexer'
        wazuh_indexer_admin_hash: '$2y$12$PFQeLaOF/IlLbEmdGxX9R.Q1WJEkVmkvEAYQFjhb48ISHwAV1VAui'
        wazuh_indexer_version: '4.10.1'
        wazuh_indexer_hostname: 'wazuh.indexer'
        wazuh_indexer_network: '{{ security_network }}'
        wazuh_indexer_data_vol: 'wazuh_indexer'
        wazuh_indexer_tls_dir: '{{ security_wazuh_certs }}'
        wazuh_indexer_config_dir: '/var/wazuh_indexer'
        wazuh_indexer_port: '9200'
        wazuh_indexer_node_name: 'wazuh.indexer'
        wazuh_indexer_cluster_name: 'wazuh-cluster'
        wazuh_indexer_cluster_initial_master_node: 'wazuh.indexer'

    - name: Deploy Wazuh manager
      ansible.builtin.import_role:
        name: wazuh_manager
      vars:
        wazuh_manager_user: '{{ security_user }}'
        wazuh_manager_container: 'wazuh_manager'
        wazuh_manager_network: '{{ security_network }}'
        wazuh_manager_hostname: 'wazuh.manager'
        wazuh_manager_agent: '1514'
        wazuh_manager_enrollment: '1515'
        wazuh_manager_authd_password: '{{ siem_enrollment_pass }}'
        wazuh_manager_syslog: '514'
        wazuh_manager_api: '55000'
        wazuh_manager_version: '4.10.1'
        wazuh_manager_api_configuration_vol: 'wazuh_manager_conf'
        wazuh_manager_etc_vol: 'wazuh_manager_etc'
        wazuh_manager_logs_vol: 'wazuh_manager_logs'
        wazuh_manager_queue_vol: 'wazuh_manager_queue'
        wazuh_manager_var_multigroups_vol: 'wazuh_manager_var_multigroups'
        wazuh_manager_integrations_vol: 'wazuh_manager_integrations'
        wazuh_manager_active_response_vol: 'wazuh_manager_active_response'
        wazuh_manager_agentless_vol: 'wazuh_manager_agentless'
        wazuh_manager_wodles_vol: 'wazuh_manager_wodles'
        wazuh_manager_filebeat_etc_vol: 'wazuh_manager_filebeat_etc'
        wazuh_manager_filebeat_var_vol: 'wazuh_manager_filebeat_var'
        wazuh_manager_ssl_certs_dir: '{{ security_wazuh_certs }}'
        wazuh_manager_config_dir: '/var/wazuh_manager'
        wazuh_manager_indexer_host: 'wazuh.indexer'
        wazuh_manager_indexer_port: '9200'
        wazuh_manager_indexer_username: 'admin'
        wazuh_manager_indexer_password: 'WZ_Idx#kN5$pL8vM2@bR6&xQ4wY9zT7'
        wazuh_manager_api_username: 'wazuh_api'
        wazuh_manager_api_password: 'WZ_Api#mP6$nK9vL3@bX7&rQ4wY8zT5'

    - name: Deploy Wazuh Dashboard
      ansible.builtin.import_role:
        name: wazuh_dashboard
      vars:
        wazuh_dashboard_user: '{{ security_user }}'
        wazuh_dashboard_version: '4.10.1'
        wazuh_dashboard_container: 'wazuh_dashboard'
        wazuh_dashboard_hostname: 'wazuh.dashboard'
        wazuh_dashboard_network: '{{ security_network }}'
        wazuh_dashboard_https: '5601'
        wazuh_dashboard_api_config_vol: 'wazuh_dashboard_api_conf'
        wazuh_dashboard_custom_vol: 'wazuh_dashboard_custom'
        wazuh_dashboard_ssl_certs_dir: '{{ security_wazuh_certs }}'
        wazuh_dashboard_config_dir: '/var/wazuh_dashboard'
        wazuh_dashboard_manager_host: 'wazuh.manager'
        wazuh_dashboard_manager_user: 'wazuh_dashboard'
        wazuh_dashboard_manager_pass: 'WZ_Dash#kL8$mN4vR7@bP2&xQ9wY5zT3'
        wazuh_dashboard_indexer_username: 'admin'
        wazuh_dashboard_indexer_password: 'WZ_DashIdx#pK7$nL5vM9@bR3&xQ8wT4'
        wazuh_dashboard_username: 'admin'
        wazuh_dashboard_password: 'WZ_DashAdmin#mN6$kL4vR8@bP5&xQ2wY7'
        wazuh_dashboard_api_url: 'https://wazuh.manager'
        wazuh_dashboard_api_user: 'wazuh_api'
        wazuh_dashboard_api_pass: 'WZ_Api#mP6$nK9vL3@bX7&rQ4wY8zT5'

    - name: Wait a minute for Keycloak to initialize
      ansible.builtin.pause:
        seconds: 60

    - name: Ensure homelab Keycloak realm is configured
      middleware_automation.keycloak.keycloak_realm:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        registration_allowed: false
        remember_me: true
        verify_email: false
        realm: '{{ homelab_realm }}'
        enabled: true
        id: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          61333130633239303036376439316630306563633638643135326166656166386166623065346231
          3466353261323264383666306661613833653563646430610a383861306366373439653362363739
          33323564346461343165323036363764306537356632333835356431363565356133383364373662
          3334663364623734300a376335666437366530653030656163386635383962306534303263363136
          3636
        display_name: !vault |
          $ANSIBLE_VAULT;1.1;AES256
          64313033653233323364373663386665396530393231323631346539306435313865396536666636
          6431373864333239393963363961313064643730633130390a616664653533383330303636376437
          32346665313466643939643835613731646661336465323735303032346535656439376636303131
          6664323533613831390a333933306337613935343961366530616632663363643735386661636430
          6436
        state: present

    - name: Ensure Code service is registered as a client
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ code_client }}'
        name: '{{ code_client }}'
        description: 'Main Code App. To develop in general'
        # base_url: 'https://{{ code_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ code_secret }}'
        redirect_uris:
          - 'https://{{ code_personal_host }}.{{ internet_host }}/*'
          - 'https://{{ code_work_host }}.{{ internet_host }}/*'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: false
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ code_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ code_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true

    - name: Ensure Remote service is registered as a client
      middleware_automation.keycloak.keycloak_client:
        auth_client_id: admin-cli
        auth_keycloak_url: 'https://{{ auth_host }}.{{ internet_host }}'
        auth_realm: master
        auth_username: '{{ security_keycloak_admin_user }}'
        auth_password: '{{ security_keycloak_admin_password }}'
        state: present
        realm: '{{ homelab_realm }}'
        client_id: '{{ remote_client }}'
        name: '{{ remote_client }}'
        description: 'Remote access to homelab virtual machines'
        base_url: 'https://{{ remote_host }}.{{ internet_host }}'
        enabled: true
        client_authenticator_type: client-secret
        secret: '{{ remote_secret }}'
        redirect_uris:
          - 'https://{{ remote_host }}.{{ internet_host }}/*'
        bearer_only: false
        consent_required: false
        standard_flow_enabled: true
        implicit_flow_enabled: true
        direct_access_grants_enabled: false
        service_accounts_enabled: false
        authorization_services_enabled: false
        public_client: false
        frontchannel_logout: false
        protocol: openid-connect
        protocol_mappers:
          - config:
              included.client.audience: '{{ remote_client }}'
              access.token.claim: 'true'
              id.token.claim: 'true'
            name: '{{ remote_client }}-audience'
            protocol: openid-connect
            protocolMapper: oidc-audience-mapper
        full_scope_allowed: false
        node_re_registration_timeout: -1
        use_template_config: false
        use_template_scope: false
        use_template_mappers: false
        always_display_in_console: true
